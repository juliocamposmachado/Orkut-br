-- =========================================================================
-- üîí SCRIPT DE CORRE√á√ÉO DE SEGURAN√áA SUPABASE - ORKUT BR
-- =========================================================================
-- Este script corrige todos os problemas de seguran√ßa detectados pelo linter
-- Execute no SQL Editor do Supabase Dashboard
-- =========================================================================

-- 1. HABILITAR RLS (ROW LEVEL SECURITY) EM TODAS AS TABELAS P√öBLICAS
-- =========================================================================

-- Tabela: community_posts
ALTER TABLE public.community_posts ENABLE ROW LEVEL SECURITY;

-- Pol√≠tica para community_posts - usu√°rios podem ver posts de comunidades que s√£o membros
CREATE POLICY "Users can view community posts where they are members" ON public.community_posts
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM public.community_members cm 
            WHERE cm.community_id = community_posts.community_id 
            AND cm.profile_id = auth.uid()
        )
        OR 
        -- Ou se a comunidade √© p√∫blica (assumindo que temos essa informa√ß√£o)
        EXISTS (
            SELECT 1 FROM public.communities c 
            WHERE c.id = community_posts.community_id
        )
    );

-- Pol√≠tica para community_posts - usu√°rios podem inserir posts em comunidades onde s√£o membros
CREATE POLICY "Users can create posts in communities where they are members" ON public.community_posts
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM public.community_members cm 
            WHERE cm.community_id = community_posts.community_id 
            AND cm.profile_id = auth.uid()
        ) 
        AND author_id = auth.uid()
    );

-- Pol√≠tica para community_posts - usu√°rios podem editar seus pr√≥prios posts
CREATE POLICY "Users can update their own community posts" ON public.community_posts
    FOR UPDATE USING (author_id = auth.uid()) 
    WITH CHECK (author_id = auth.uid());

-- Pol√≠tica para community_posts - usu√°rios podem deletar seus pr√≥prios posts ou moderadores
CREATE POLICY "Users can delete their own community posts or moderators can delete" ON public.community_posts
    FOR DELETE USING (
        author_id = auth.uid() 
        OR 
        EXISTS (
            SELECT 1 FROM public.community_members cm 
            WHERE cm.community_id = community_posts.community_id 
            AND cm.profile_id = auth.uid()
            AND cm.role IN ('moderator', 'admin')
        )
    );

-- =========================================================================

-- Tabela: conversations
ALTER TABLE public.conversations ENABLE ROW LEVEL SECURITY;

-- Pol√≠tica para conversations - usu√°rios podem ver apenas suas pr√≥prias conversas
CREATE POLICY "Users can view their own conversations" ON public.conversations
    FOR SELECT USING (
        participant1_id = auth.uid() OR participant2_id = auth.uid()
    );

-- Pol√≠tica para conversations - usu√°rios podem criar conversas onde s√£o participantes
CREATE POLICY "Users can create conversations where they are participants" ON public.conversations
    FOR INSERT WITH CHECK (
        participant1_id = auth.uid() OR participant2_id = auth.uid()
    );

-- Pol√≠tica para conversations - usu√°rios podem atualizar suas pr√≥prias conversas
CREATE POLICY "Users can update their own conversations" ON public.conversations
    FOR UPDATE USING (
        participant1_id = auth.uid() OR participant2_id = auth.uid()
    )
    WITH CHECK (
        participant1_id = auth.uid() OR participant2_id = auth.uid()
    );

-- =========================================================================

-- Tabela: call_signals
ALTER TABLE public.call_signals ENABLE ROW LEVEL SECURITY;

-- Pol√≠tica para call_signals - usu√°rios podem ver sinais de chamadas onde est√£o envolvidos
CREATE POLICY "Users can view call signals where they are involved" ON public.call_signals
    FOR SELECT USING (
        caller_id = auth.uid() OR receiver_id = auth.uid()
    );

-- Pol√≠tica para call_signals - usu√°rios podem criar sinais de chamada onde s√£o o caller
CREATE POLICY "Users can create call signals as caller" ON public.call_signals
    FOR INSERT WITH CHECK (caller_id = auth.uid());

-- Pol√≠tica para call_signals - usu√°rios podem atualizar sinais onde est√£o envolvidos
CREATE POLICY "Users can update call signals where they are involved" ON public.call_signals
    FOR UPDATE USING (
        caller_id = auth.uid() OR receiver_id = auth.uid()
    )
    WITH CHECK (
        caller_id = auth.uid() OR receiver_id = auth.uid()
    );

-- Pol√≠tica para call_signals - usu√°rios podem deletar seus pr√≥prios sinais
CREATE POLICY "Users can delete their own call signals" ON public.call_signals
    FOR DELETE USING (caller_id = auth.uid());

-- =========================================================================

-- Tabela: moderation_actions
ALTER TABLE public.moderation_actions ENABLE ROW LEVEL SECURITY;

-- Pol√≠tica para moderation_actions - apenas moderadores podem ver a√ß√µes de modera√ß√£o
CREATE POLICY "Only moderators can view moderation actions" ON public.moderation_actions
    FOR SELECT USING (
        -- Assumindo que temos uma tabela ou fun√ß√£o que identifica moderadores
        EXISTS (
            SELECT 1 FROM public.profiles p 
            WHERE p.id = auth.uid() 
            -- Aqui voc√™ pode adicionar uma coluna is_moderator ou similar
        )
        OR moderator_id = auth.uid()
    );

-- Pol√≠tica para moderation_actions - apenas moderadores podem criar a√ß√µes
CREATE POLICY "Only moderators can create moderation actions" ON public.moderation_actions
    FOR INSERT WITH CHECK (
        moderator_id = auth.uid()
        -- Adicione aqui verifica√ß√£o se o usu√°rio √© moderador
    );

-- =========================================================================

-- Tabela: post_reports
ALTER TABLE public.post_reports ENABLE ROW LEVEL SECURITY;

-- Pol√≠tica para post_reports - usu√°rios podem ver seus pr√≥prios reports
CREATE POLICY "Users can view their own post reports" ON public.post_reports
    FOR SELECT USING (reporter_id = auth.uid());

-- Pol√≠tica para post_reports - usu√°rios podem criar reports
CREATE POLICY "Users can create post reports" ON public.post_reports
    FOR INSERT WITH CHECK (reporter_id = auth.uid());

-- Pol√≠tica para post_reports - apenas moderadores podem atualizar status dos reports
CREATE POLICY "Only moderators can update post reports" ON public.post_reports
    FOR UPDATE USING (
        -- Verificar se √© moderador (ajuste conforme sua estrutura)
        EXISTS (
            SELECT 1 FROM public.profiles p 
            WHERE p.id = auth.uid()
            -- Adicione verifica√ß√£o de moderador aqui
        )
    );

-- =========================================================================

-- Tabela: banned_users
ALTER TABLE public.banned_users ENABLE ROW LEVEL SECURITY;

-- Pol√≠tica para banned_users - apenas admins/moderadores podem ver usu√°rios banidos
CREATE POLICY "Only admins can view banned users" ON public.banned_users
    FOR SELECT USING (
        -- Verificar se √© admin/moderador (ajuste conforme sua estrutura)
        EXISTS (
            SELECT 1 FROM public.profiles p 
            WHERE p.id = auth.uid()
            -- Adicione verifica√ß√£o de admin aqui
        )
    );

-- Pol√≠tica para banned_users - apenas admins podem banir usu√°rios
CREATE POLICY "Only admins can ban users" ON public.banned_users
    FOR INSERT WITH CHECK (
        banned_by = auth.uid()
        -- Adicione verifica√ß√£o de admin aqui
    );

-- Pol√≠tica para banned_users - apenas admins podem atualizar bans
CREATE POLICY "Only admins can update bans" ON public.banned_users
    FOR UPDATE USING (
        -- Verificar se √© admin
        EXISTS (
            SELECT 1 FROM public.profiles p 
            WHERE p.id = auth.uid()
            -- Adicione verifica√ß√£o de admin aqui
        )
    );

-- =========================================================================

-- 2. CORRIGIR VIEW COM SECURITY DEFINER
-- =========================================================================

-- Primeiro, vamos ver como est√° definida a view friends_view atual
-- Execute este comando para ver a defini√ß√£o atual:
-- \d+ public.friends_view

-- Recriar a view friends_view SEM security definer
DROP VIEW IF EXISTS public.friends_view;

CREATE VIEW public.friends_view AS
SELECT 
    f.id,
    f.requester_id,
    f.addressee_id,
    f.status,
    f.created_at,
    p1.username as requester_username,
    p1.display_name as requester_display_name,
    p1.photo_url as requester_photo_url,
    p2.username as addressee_username,
    p2.display_name as addressee_display_name,
    p2.photo_url as addressee_photo_url
FROM public.friendships f
LEFT JOIN public.profiles p1 ON f.requester_id = p1.id
LEFT JOIN public.profiles p2 ON f.addressee_id = p2.id;

-- Habilitar RLS na view tamb√©m (se aplic√°vel)
-- Note: Views herdam as pol√≠ticas RLS das tabelas subjacentes

-- =========================================================================

-- 3. CRIAR FUN√á√ÉO HELPER PARA VERIFICAR MODERADORES (OPCIONAL)
-- =========================================================================

-- Fun√ß√£o para verificar se um usu√°rio √© moderador
CREATE OR REPLACE FUNCTION public.is_moderator(user_id uuid)
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    -- Ajuste esta l√≥gica conforme sua estrutura de dados
    -- Exemplo: verificar se existe uma coluna is_moderator na tabela profiles
    RETURN EXISTS (
        SELECT 1 FROM public.profiles 
        WHERE id = user_id 
        -- AND is_moderator = true  -- Descomente se voc√™ tem esta coluna
    );
    
    -- Ou verificar se o usu√°rio √© membro com role de moderador em alguma comunidade
    -- RETURN EXISTS (
    --     SELECT 1 FROM public.community_members 
    --     WHERE profile_id = user_id 
    --     AND role IN ('moderator', 'admin')
    -- );
END;
$$;

-- =========================================================================

-- 4. POL√çTICAS ADICIONAIS DE SEGURAN√áA (RECOMENDADAS)
-- =========================================================================

-- Se voc√™ tem uma tabela community_members, habilitar RLS tamb√©m
-- ALTER TABLE public.community_members ENABLE ROW LEVEL SECURITY;

-- Pol√≠tica para community_members - usu√°rios podem ver membros de comunidades que fazem parte
-- CREATE POLICY "Users can view community members where they are members" ON public.community_members
--     FOR SELECT USING (
--         profile_id = auth.uid() 
--         OR 
--         EXISTS (
--             SELECT 1 FROM public.community_members cm 
--             WHERE cm.community_id = community_members.community_id 
--             AND cm.profile_id = auth.uid()
--         )
--     );

-- =========================================================================
-- üéØ INSTRU√á√ïES PARA APLICAR:
-- =========================================================================
-- 1. Acesse o Supabase Dashboard
-- 2. V√° em "SQL Editor" 
-- 3. Cole este script completo
-- 4. Execute (clique em "Run")
-- 5. Verifique se n√£o h√° erros
-- 6. Execute o Linter novamente para confirmar que os erros foram corrigidos
-- =========================================================================

-- Verifica√ß√£o final - listar todas as tabelas com RLS habilitado
SELECT schemaname, tablename, rowsecurity 
FROM pg_tables 
WHERE schemaname = 'public' 
AND rowsecurity = true;

-- Listar todas as pol√≠ticas criadas
SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual 
FROM pg_policies 
WHERE schemaname = 'public';

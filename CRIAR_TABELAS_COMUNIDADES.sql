-- ========================================
-- SCRIPT PARA CRIAR TABELAS COMPLETAS DO ORKUT
-- Execute no Supabase Dashboard > SQL Editor
-- Inclui: posts do feed, comunidades e membros
-- ========================================

-- 0. Criar tabela posts (feed global dos usuários)
CREATE TABLE IF NOT EXISTS public.posts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content TEXT NOT NULL,
    author UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    author_name TEXT NOT NULL,
    author_photo TEXT,
    visibility TEXT DEFAULT 'public' CHECK (visibility IN ('public', 'friends')),
    likes_count INTEGER DEFAULT 0,
    comments_count INTEGER DEFAULT 0,
    is_dj_post BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 1. Criar tabela community_posts
CREATE TABLE IF NOT EXISTS public.community_posts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    community_id BIGINT NOT NULL REFERENCES public.communities(id) ON DELETE CASCADE,
    author_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    likes_count INTEGER DEFAULT 0,
    comments_count INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. Criar tabela community_members  
CREATE TABLE IF NOT EXISTS public.community_members (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    community_id BIGINT NOT NULL REFERENCES public.communities(id) ON DELETE CASCADE,
    profile_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    role TEXT DEFAULT 'member' CHECK (role IN ('owner', 'moderator', 'member')),
    joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(community_id, profile_id)
);

-- 3. Habilitar Row Level Security
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.community_posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.community_members ENABLE ROW LEVEL SECURITY;

-- 3.1. Políticas para posts (feed global)
CREATE POLICY "Anyone can view public posts" ON public.posts
    FOR SELECT USING (visibility = 'public' OR author = auth.uid());

CREATE POLICY "Users can create their own posts" ON public.posts
    FOR INSERT WITH CHECK (auth.uid() = author);

CREATE POLICY "Users can update their own posts" ON public.posts
    FOR UPDATE USING (auth.uid() = author);

CREATE POLICY "Users can delete their own posts" ON public.posts
    FOR DELETE USING (auth.uid() = author);

-- 4. Políticas para community_posts
CREATE POLICY "Users can view community posts if they are members" ON public.community_posts
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM public.community_members
            WHERE community_id = community_posts.community_id
            AND profile_id = auth.uid()
        )
    );

CREATE POLICY "Users can create posts in communities they are members of" ON public.community_posts
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM public.community_members
            WHERE community_id = community_posts.community_id
            AND profile_id = auth.uid()
        ) AND auth.uid() = author_id
    );

CREATE POLICY "Users can update their own posts" ON public.community_posts
    FOR UPDATE USING (auth.uid() = author_id);

CREATE POLICY "Users can delete their own posts" ON public.community_posts
    FOR DELETE USING (auth.uid() = author_id);

-- 5. Políticas para community_members
CREATE POLICY "Anyone can view community members" ON public.community_members
    FOR SELECT USING (true);

CREATE POLICY "Users can join communities" ON public.community_members
    FOR INSERT WITH CHECK (auth.uid() = profile_id);

CREATE POLICY "Users can leave communities" ON public.community_members
    FOR DELETE USING (auth.uid() = profile_id OR 
        EXISTS (
            SELECT 1 FROM public.community_members cm
            WHERE cm.community_id = community_members.community_id
            AND cm.profile_id = auth.uid()
            AND cm.role IN ('owner', 'moderator')
        )
    );

-- 6. Índices para performance
-- Índices para posts (feed global)
CREATE INDEX IF NOT EXISTS idx_posts_author ON public.posts(author);
CREATE INDEX IF NOT EXISTS idx_posts_created_at ON public.posts(created_at);
CREATE INDEX IF NOT EXISTS idx_posts_visibility ON public.posts(visibility);
CREATE INDEX IF NOT EXISTS idx_posts_is_dj_post ON public.posts(is_dj_post);

-- Índices para community_posts
CREATE INDEX IF NOT EXISTS idx_community_posts_community_id ON public.community_posts(community_id);
CREATE INDEX IF NOT EXISTS idx_community_posts_author_id ON public.community_posts(author_id);
CREATE INDEX IF NOT EXISTS idx_community_posts_created_at ON public.community_posts(created_at);

-- Índices para community_members
CREATE INDEX IF NOT EXISTS idx_community_members_community_id ON public.community_members(community_id);
CREATE INDEX IF NOT EXISTS idx_community_members_profile_id ON public.community_members(profile_id);

-- ========================================
-- INSTRUÇÕES:
-- 1. Copie TODO este conteúdo
-- 2. Acesse https://supabase.com/dashboard
-- 3. Vá para SQL Editor
-- 4. Cole e execute este script
-- 5. Verifique se as tabelas apareceram em Database > Tables
-- ========================================

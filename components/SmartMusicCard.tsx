'use client'

import React, { useState, useEffect } from 'react'
import Image from 'next/image'
import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Loader2, Music, Radio, Sparkles, Clock, RefreshCw, ExternalLink, Heart } from 'lucide-react'

interface CurrentSong {
  artist: string
  song: string
  timestamp: string
}

interface MusicAnalysis {
  success: boolean
  content: string
  artist: string
  song: string
  timestamp: string
  fallback?: boolean
}

const SmartMusicCard: React.FC = () => {
  const [currentSong, setCurrentSong] = useState<CurrentSong | null>(null)
  const [analysis, setAnalysis] = useState<MusicAnalysis | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date())
  const [userStartTime] = useState<Date>(new Date()) // Momento em que o usu√°rio entrou no site
  const [showInvitation, setShowInvitation] = useState(true) // Controla se mostra convite ou an√°lise
  const [lastAnalysisTime, setLastAnalysisTime] = useState<Date | null>(null) // √öltimo momento de an√°lise musical

  // Fun√ß√£o para buscar a m√∫sica atual
  const fetchCurrentSong = async (): Promise<CurrentSong | null> => {
    try {
      const response = await fetch('/api/radio-status')
      if (!response.ok) throw new Error('Erro ao buscar status da r√°dio')
      
      const data = await response.json()
      
      // Extrair informa√ß√µes da m√∫sica atual
      if (data.currentSong) {
        // Tratar caracteres especiais e acentos
        const cleanSong = data.currentSong.trim()
        
        // Procurar pelo primeiro ' - ' (artista - m√∫sica)
        const separatorIndex = cleanSong.indexOf(' - ')
        
        if (separatorIndex > 0) {
          const artist = cleanSong.substring(0, separatorIndex).trim()
          const song = cleanSong.substring(separatorIndex + 3).trim()
          
          return {
            artist: artist || 'Artista Desconhecido',
            song: song || 'M√∫sica Desconhecida',
            timestamp: new Date().toISOString()
          }
        } else {
          // Se n√£o encontrou separador, usar a string toda como m√∫sica
          return {
            artist: 'Artista Desconhecido',
            song: cleanSong || 'M√∫sica Desconhecida',
            timestamp: new Date().toISOString()
          }
        }
      }
      
      return null
    } catch (err) {
      console.error('‚ùå Erro ao buscar m√∫sica atual:', err)
      return null
    }
  }

  // Fun√ß√£o para buscar an√°lise musical do Gemini
  const fetchMusicAnalysis = async (artist: string, song: string): Promise<MusicAnalysis | null> => {
    try {
      const response = await fetch('/api/gemini/music-info', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ artist, song })
      })

      if (!response.ok) {
        throw new Error(`Erro na API: ${response.status}`)
      }

      const data = await response.json()
      return data
    } catch (err) {
      console.error('‚ùå Erro ao buscar an√°lise musical:', err)
      return null
    }
  }

  // Array de frases convidativas para incentivo √† r√°dio
  const invitationMessages = [
    "üéµ Que tal relaxar ouvindo nossa sele√ß√£o musical? A R√°dio Tatuap√© FM tem o melhor da m√∫sica para voc√™! üìª‚ú®",
    "üé∂ Sua trilha sonora perfeita est√° aqui! Sintonize a R√°dio Tatuap√© FM e deixe a m√∫sica embalar seu momento üéßüí´",
    "üìª M√∫sica boa n√£o para! Venha curtir os sucessos que tocam na R√°dio Tatuap√© FM - sua companhia musical favorita! üéµ‚ù§Ô∏è",
    "üé§ Momentos especiais pedem m√∫sicas especiais! A R√°dio Tatuap√© FM est√° aqui para alegrar seu dia üåüüìª",
    "üé∏ Rock, pop, MPB e muito mais! Na R√°dio Tatuap√© FM voc√™ encontra todos os estilos que ama üéµüî•",
    "üíø Nossos DJs selecionaram os melhores hits para voc√™! N√£o perca - R√°dio Tatuap√© FM no ar! üìªüé∂",
    "üéπ Cada m√∫sica conta uma hist√≥ria... Deixe a R√°dio Tatuap√© FM contar a sua atrav√©s dos nossos sons! üéµüìñ",
    "üåà Cores e sons se misturam na R√°dio Tatuap√© FM! Venha viver essa experi√™ncia musical √∫nica conosco! üé∂‚ú®",
    "üé∫ Do cl√°ssico ao contempor√¢neo, temos tudo que voc√™ precisa ouvir! R√°dio Tatuap√© FM - sempre no seu cora√ß√£o! üíïüìª",
    "ü•≥ Que festa √© a nossa programa√ß√£o! Junte-se a n√≥s na R√°dio Tatuap√© FM e celebre a boa m√∫sica! üéâüéµ"
  ]

  // Fun√ß√£o para gerar mensagem convidativa aleat√≥ria
  const generateInvitationMessage = (): string => {
    const randomIndex = Math.floor(Math.random() * invitationMessages.length)
    return invitationMessages[randomIndex]
  }

  // Fun√ß√£o para gerar fallback quando a API falha
  const generateFallback = (artist: string, song: string): MusicAnalysis => {
    const fallbacks = [
      `üéµ "${song}" de ${artist} est√° tocando agora! Uma m√∫sica que sempre emociona e traz boas lembran√ßas üé§‚ú® Ou√ßa na R√°dio Tatuap√© FM! üìª`,
      `üé∏ Que som incr√≠vel! ${artist} sempre sabe como criar uma atmosfera √∫nica com "${song}" üéµüî• Continue ouvindo na R√°dio Tatuap√© FM! üìª`,
      `üí´ "${song}" - ${artist} √© uma daquelas m√∫sicas que marcaram uma gera√ß√£o! üé§üéµ N√£o perca na R√°dio Tatuap√© FM! üìª`,
      `üéµ Momento especial com "${song}" de ${artist}! Uma m√∫sica cheia de hist√≥ria e emo√ß√£o üé∏‚ú® S√≥ na R√°dio Tatuap√© FM! üìª`
    ]
    
    const randomFallback = fallbacks[Math.floor(Math.random() * fallbacks.length)]
    
    return {
      success: true,
      content: randomFallback,
      artist,
      song,
      timestamp: new Date().toISOString(),
      fallback: true
    }
  }

  // Fun√ß√£o para verificar se deve fazer an√°lise musical
  const shouldAnalyzeMusic = (): boolean => {
    const now = new Date()
    const timeOnSite = (now.getTime() - userStartTime.getTime()) / 1000 / 60 // minutos no site
    
    // S√≥ faz an√°lise ap√≥s 10 minutos no site
    if (timeOnSite < 10) {
      return false
    }
    
    // Se nunca fez an√°lise e j√° passou 10 minutos, fazer agora
    if (!lastAnalysisTime) {
      return true
    }
    
    // Verificar se j√° passaram 10 minutos desde a √∫ltima an√°lise
    const timeSinceLastAnalysis = (now.getTime() - lastAnalysisTime.getTime()) / 1000 / 60
    return timeSinceLastAnalysis >= 10
  }

  // Fun√ß√£o principal para atualizar dados
  const updateMusicCard = async () => {
    setLoading(true)
    setError(null)

    try {
      // Buscar m√∫sica atual sempre (para mostrar o que est√° tocando)
      const song = await fetchCurrentSong()
      
      if (!song) {
        // Se n√£o conseguiu buscar m√∫sica, mostrar apenas mensagem convidativa
        const invitationContent = generateInvitationMessage()
        setAnalysis({
          success: true,
          content: invitationContent,
          artist: "R√°dio Tatuap√© FM",
          song: "Programa√ß√£o Musical",
          timestamp: new Date().toISOString(),
          fallback: false
        })
        setCurrentSong({
          artist: "R√°dio Tatuap√© FM",
          song: "üéµ Sua m√∫sica favorita est√° aqui!",
          timestamp: new Date().toISOString()
        })
        setShowInvitation(true)
        setLastUpdate(new Date())
        return
      }

      setCurrentSong(song)

      // Verificar se deve fazer an√°lise musical ou mostrar convite
      if (shouldAnalyzeMusic()) {
        console.log('üéµ Fazendo an√°lise musical - tempo adequado!')
        
        // Fazer an√°lise musical do Gemini
        const analysis = await fetchMusicAnalysis(song.artist, song.song)
        
        if (analysis && analysis.success) {
          setAnalysis(analysis)
          setShowInvitation(false)
          setLastAnalysisTime(new Date()) // Marcar o momento da an√°lise
        } else {
          // Usar fallback em caso de erro na API
          const fallbackAnalysis = generateFallback(song.artist, song.song)
          setAnalysis(fallbackAnalysis)
          setShowInvitation(false)
          setLastAnalysisTime(new Date())
        }
      } else {
        console.log('üé∂ Mostrando mensagem convidativa - aguardando tempo para an√°lise')
        
        // Mostrar mensagem convidativa em vez de an√°lise
        const invitationContent = generateInvitationMessage()
        setAnalysis({
          success: true,
          content: invitationContent,
          artist: song.artist,
          song: song.song,
          timestamp: new Date().toISOString(),
          fallback: false
        })
        setShowInvitation(true)
      }

      setLastUpdate(new Date())
    } catch (err) {
      console.error('‚ùå Erro ao atualizar card musical:', err)
      setError('Erro ao carregar informa√ß√µes')
    } finally {
      setLoading(false)
    }
  }

  // Carregar dados iniciais
  useEffect(() => {
    updateMusicCard()
    
    // Intervalo inteligente:
    // - Primeiros 10 min: frases convidativas a cada 30s
    // - Ap√≥s 10 min: alterna entre convites (30s) e an√°lises (10min)
    const interval = setInterval(updateMusicCard, 30000) // 30s para ser mais din√¢mico
    
    return () => clearInterval(interval)
  }, [])

  // Fun√ß√£o para refresh manual
  const handleRefresh = () => {
    updateMusicCard()
  }

  // Fun√ß√£o para abrir o site da r√°dio (mesmo do RadioWidget)
  const openRadioWebsite = () => {
    const radioWebsite = "https://radiotatuapefm.radiostream321.com/"
    window.open(radioWebsite, '_blank', 'noopener,noreferrer')
  }

  if (loading) {
    return (
      <Card className="w-full mb-6 bg-gradient-to-br from-purple-100 to-pink-100 dark:from-purple-900/20 dark:to-pink-900/20 border-purple-200 dark:border-purple-700">
        <CardContent className="p-6">
          <div className="flex items-center justify-center space-x-2">
            <Loader2 className="h-6 w-6 animate-spin text-purple-600" />
            <span className="text-purple-600 font-medium">Carregando informa√ß√µes musicais...</span>
          </div>
        </CardContent>
      </Card>
    )
  }

  if (error || !currentSong || !analysis) {
    return (
      <Card className="w-full mb-6 bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-900 border-gray-300 dark:border-gray-600">
        <CardContent className="p-6 text-center">
          <Music className="h-12 w-12 mx-auto mb-4 text-gray-400" />
          <p className="text-gray-600 dark:text-gray-400 mb-4">
            {error || 'Nenhuma m√∫sica dispon√≠vel no momento'}
          </p>
          <Button onClick={handleRefresh} variant="outline" size="sm">
            <RefreshCw className="h-4 w-4 mr-2" />
            Tentar novamente
          </Button>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card className="w-full mb-6 bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/10 dark:to-pink-900/10 border-purple-200 dark:border-purple-700 shadow-lg">
      <CardContent className="p-6">
        {/* Header do Card */}
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-3">
            {/* Logo da R√°dio */}
            <div className="relative w-12 h-12 rounded-full overflow-hidden border-2 border-purple-300">
              <div className="absolute inset-0 bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center">
                <Radio className="h-6 w-6 text-white" />
              </div>
            </div>
            
            <div>
              <h3 className="text-lg font-bold text-purple-700 dark:text-purple-300 flex items-center">
                <Sparkles className="h-5 w-5 mr-2" />
                DJ Orky Informa
              </h3>
              <div className="flex items-center space-x-2 text-sm text-purple-600 dark:text-purple-400">
                <Badge variant="secondary" className="bg-purple-100 text-purple-700">
                  AO VIVO
                </Badge>
                {analysis.fallback && (
                  <Badge variant="outline" className="text-xs">
                    Modo Offline
                  </Badge>
                )}
              </div>
            </div>
          </div>
          
          <Button
            onClick={handleRefresh}
            variant="ghost"
            size="sm"
            className="text-purple-600 hover:text-purple-700"
          >
            <RefreshCw className="h-4 w-4" />
          </Button>
        </div>

        {/* Informa√ß√µes da M√∫sica */}
        <div className="bg-white/60 dark:bg-gray-800/60 rounded-lg p-4 mb-4">
          <div className="flex items-center space-x-3 mb-2">
            <Music className="h-5 w-5 text-purple-600" />
            <div>
              <h4 className="font-bold text-gray-900 dark:text-gray-100">
                {currentSong.song}
              </h4>
              <p className="text-purple-600 dark:text-purple-400 font-medium">
                {currentSong.artist}
              </p>
            </div>
          </div>
        </div>

        {/* An√°lise Inteligente */}
        <div className="space-y-3">
          <div className="bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg p-4 border border-purple-200/50">
            <p className="text-gray-800 dark:text-gray-200 leading-relaxed">
              {analysis.content}
            </p>
          </div>

          {/* Footer */}
          <div className="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
            <div className="flex items-center space-x-2">
              <Clock className="h-4 w-4" />
              <span>Atualizado h√° {Math.floor((Date.now() - lastUpdate.getTime()) / 1000 / 60)} min</span>
            </div>
            
            <div className="flex items-center space-x-1">
              <span>Powered by</span>
              <Badge variant="outline" className="text-xs">
                Gemini AI
              </Badge>
            </div>
          </div>

          {/* Bot√£o Ouvir R√°dio */}
          <div className="mt-4 pt-3 border-t border-purple-200/50">
            <button
              onClick={openRadioWebsite}
              className="w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-semibold py-3 px-4 rounded-lg transition-all duration-200 transform hover:scale-[1.02] shadow-lg hover:shadow-xl flex items-center justify-center space-x-2"
              title="Clique para ouvir no site da r√°dio"
            >
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clipRule="evenodd" />
              </svg>
              <span>Ouvir R√°dio</span>
              <ExternalLink className="w-4 h-4" />
            </button>
            
            <p className="text-xs text-gray-500 text-center mt-2">
              Abre o player externo da r√°dio
            </p>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}

export default SmartMusicCard

/**
 * üöÄ ORKUT PASTEDB ADAPTER - Integra√ß√£o Next.js
 * ============================================= 
 * 
 * Adaptador para integrar o sistema PasteDatabase descentralizado
 * com o projeto Orkut em Next.js/TypeScript.
 * 
 * Esta integra√ß√£o revolucion√°ria permite que o Orkut funcione
 * sem banco de dados tradicional!
 */

import { MultiPasteDatabase } from './multi_paste_database';

// Tipos TypeScript para o Orkut
export interface OrkutProfile {
  id: string;
  username: string;
  display_name: string;
  photo_url: string;
  email: string;
  phone?: string;
  relationship: string;
  location: string;
  birthday?: string;
  bio: string;
  fans_count: number;
  posts_count: number;
  created_at: string;
  role?: string;
}

export interface OrkutPost {
  id: string;
  author_id: string;
  author_name: string;
  author_photo: string;
  content: string;
  photo_url?: string;
  visibility: 'public' | 'friends' | 'private';
  likes_count: number;
  comments_count: number;
  shares_count: number;
  is_hidden: boolean;
  created_at: string;
  updated_at: string;
}

export interface OrkutComment {
  id: string;
  post_id: string;
  profile_id: string;
  profile_name: string;
  content: string;
  created_at: string;
}

export interface OrkutLike {
  id: string;
  post_id: string;
  profile_id: string;
  profile_name: string;
  created_at: string;
}

export interface OrkutFriendship {
  id: string;
  requester_id: string;
  addressee_id: string;
  requester_name: string;
  addressee_name: string;
  status: 'pending' | 'accepted' | 'blocked';
  created_at: string;
  updated_at: string;
}

export interface OrkutCommunity {
  id: string;
  name: string;
  description: string;
  category: string;
  owner_id: string;
  owner_name: string;
  members_count: number;
  photo_url: string;
  visibility: 'public' | 'private' | 'restricted';
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

export interface OrkutMessage {
  id: string;
  from_profile_id: string;
  to_profile_id: string;
  from_name: string;
  to_name: string;
  content: string;
  read_at?: string;
  created_at: string;
}

// Cache local para melhor performance
interface CacheEntry<T> {
  data: T;
  timestamp: number;
  ttl: number;
}

class LocalCache {
  private cache = new Map<string, CacheEntry<any>>();
  private defaultTTL = 5 * 60 * 1000; // 5 minutos

  set<T>(key: string, data: T, ttl?: number): void {
    this.cache.set(key, {
      data,
      timestamp: Date.now(),
      ttl: ttl || this.defaultTTL
    });
  }

  get<T>(key: string): T | null {
    const entry = this.cache.get(key);
    if (!entry) return null;

    if (Date.now() - entry.timestamp > entry.ttl) {
      this.cache.delete(key);
      return null;
    }

    return entry.data;
  }

  clear(): void {
    this.cache.clear();
  }

  delete(key: string): void {
    this.cache.delete(key);
  }
}

/**
 * Adaptador principal para integra√ß√£o do Orkut com PasteDatabase
 */
export class OrkutPasteDBAdapter {
  private db: MultiPasteDatabase;
  private cache: LocalCache;
  private initialized: boolean = false;

  constructor(preferredService: string = 'dpaste') {
    this.cache = new LocalCache();
    // Em produ√ß√£o, usar a vers√£o online
    // this.db = new MultiPasteDatabase(preferredService);
    
    // Para demonstra√ß√£o, usar vers√£o offline
    console.log('üöÄ Inicializando OrkutPasteDBAdapter...');
  }

  /**
   * Inicializa√ß√£o ass√≠ncrona do adaptador
   */
  async initialize(): Promise<void> {
    if (this.initialized) return;

    try {
      console.log('üîÑ Carregando dados do PasteDatabase...');
      
      // Aqui voc√™ carregaria os dados exportados
      const migrationConfig = await this.loadMigrationConfig();
      console.log(`‚úÖ Dados carregados: ${migrationConfig.total_records} registros`);
      
      this.initialized = true;
    } catch (error) {
      console.error('‚ùå Erro ao inicializar OrkutPasteDBAdapter:', error);
      throw error;
    }
  }

  private async loadMigrationConfig(): Promise<any> {
    // Em uma implementa√ß√£o real, voc√™ carregaria os dados do PasteDatabase
    // ou dos arquivos JSON exportados
    return {
      database_type: "pastedb",
      total_records: 10,
      version: "1.0.0"
    };
  }

  // =====================================================================================
  // OPERA√á√ïES COM PERFIS
  // =====================================================================================

  async getProfile(userId: string): Promise<OrkutProfile | null> {
    const cacheKey = `profile_${userId}`;
    const cached = this.cache.get<OrkutProfile>(cacheKey);
    if (cached) return cached;

    try {
      // Em implementa√ß√£o real, usar:
      // const record = await this.db.read(`profile_${userId}`);
      // if (!record) return null;
      
      // Para demonstra√ß√£o, retornar dados de exemplo
      const profile: OrkutProfile = {
        id: userId,
        username: 'usuario_demo',
        display_name: 'Usu√°rio Demo',
        photo_url: '',
        email: 'demo@orkut.com',
        relationship: 'Solteiro(a)',
        location: 'S√£o Paulo, SP',
        bio: 'Perfil migrado do sistema PasteDB!',
        fans_count: 42,
        posts_count: 15,
        created_at: new Date().toISOString()
      };

      this.cache.set(cacheKey, profile);
      return profile;
    } catch (error) {
      console.error(`‚ùå Erro ao buscar perfil ${userId}:`, error);
      return null;
    }
  }

  async updateProfile(userId: string, profileData: Partial<OrkutProfile>): Promise<boolean> {
    try {
      // const success = await this.db.update(`profile_${userId}`, profileData);
      // if (success) {
      //   this.cache.delete(`profile_${userId}`);
      // }
      // return success;

      // Para demonstra√ß√£o
      this.cache.delete(`profile_${userId}`);
      console.log(`‚úÖ Perfil ${userId} atualizado no PasteDB`);
      return true;
    } catch (error) {
      console.error(`‚ùå Erro ao atualizar perfil ${userId}:`, error);
      return false;
    }
  }

  async searchProfiles(query: string): Promise<OrkutProfile[]> {
    try {
      // const keys = await this.db.search(query, 'username');
      // const profiles = await Promise.all(
      //   keys.map(key => this.db.read(key))
      // );
      // return profiles.filter(Boolean).map(record => record.data);

      // Para demonstra√ß√£o
      return [];
    } catch (error) {
      console.error(`‚ùå Erro ao buscar perfis:`, error);
      return [];
    }
  }

  // =====================================================================================
  // OPERA√á√ïES COM POSTS
  // =====================================================================================

  async createPost(postData: Omit<OrkutPost, 'id' | 'created_at' | 'updated_at'>): Promise<string | null> {
    try {
      const postId = this.generateId();
      const post: OrkutPost = {
        ...postData,
        id: postId,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      // await this.db.create(`post_${postId}`, post, {
      //   type: 'post',
      //   author: post.author_name,
      //   visibility: post.visibility
      // });

      console.log(`‚úÖ Post ${postId} criado no PasteDB`);
      this.cache.delete('recent_posts'); // Limpar cache de posts recentes
      return postId;
    } catch (error) {
      console.error('‚ùå Erro ao criar post:', error);
      return null;
    }
  }

  async getPost(postId: string): Promise<OrkutPost | null> {
    const cacheKey = `post_${postId}`;
    const cached = this.cache.get<OrkutPost>(cacheKey);
    if (cached) return cached;

    try {
      // const record = await this.db.read(`post_${postId}`);
      // if (!record) return null;
      // const post = record.data as OrkutPost;

      // Para demonstra√ß√£o
      const post: OrkutPost = {
        id: postId,
        author_id: 'user_001',
        author_name: 'Jo√£o Silva',
        author_photo: '',
        content: 'Post de demonstra√ß√£o do sistema PasteDB!',
        visibility: 'public',
        likes_count: 15,
        comments_count: 3,
        shares_count: 2,
        is_hidden: false,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      this.cache.set(cacheKey, post);
      return post;
    } catch (error) {
      console.error(`‚ùå Erro ao buscar post ${postId}:`, error);
      return null;
    }
  }

  async getFeedPosts(limit: number = 20, offset: number = 0): Promise<OrkutPost[]> {
    const cacheKey = `feed_${limit}_${offset}`;
    const cached = this.cache.get<OrkutPost[]>(cacheKey);
    if (cached) return cached;

    try {
      // const keys = await this.db.list_keys();
      // const postKeys = keys.filter(key => key.startsWith('post_'));
      // const posts = await Promise.all(
      //   postKeys.slice(offset, offset + limit).map(key => this.db.read(key))
      // );
      // const feedPosts = posts.filter(Boolean).map(record => record.data as OrkutPost);

      // Para demonstra√ß√£o
      const feedPosts: OrkutPost[] = [
        {
          id: 'demo_1',
          author_id: 'user_001',
          author_name: 'Jo√£o Silva',
          author_photo: '',
          content: 'Que incr√≠vel! Estamos usando PasteDB como banco de dados! üöÄ',
          visibility: 'public',
          likes_count: 23,
          comments_count: 7,
          shares_count: 4,
          is_hidden: false,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }
      ];

      this.cache.set(cacheKey, feedPosts, 2 * 60 * 1000); // Cache por 2 minutos
      return feedPosts;
    } catch (error) {
      console.error('‚ùå Erro ao buscar feed:', error);
      return [];
    }
  }

  // =====================================================================================
  // OPERA√á√ïES COM COMUNIDADES
  // =====================================================================================

  async getCommunities(limit: number = 50): Promise<OrkutCommunity[]> {
    const cacheKey = `communities_${limit}`;
    const cached = this.cache.get<OrkutCommunity[]>(cacheKey);
    if (cached) return cached;

    try {
      // const keys = await this.db.search('', null);
      // const communityKeys = keys.filter(key => key.startsWith('community_'));
      // const communities = await Promise.all(
      //   communityKeys.slice(0, limit).map(key => this.db.read(key))
      // );
      // const result = communities.filter(Boolean).map(record => record.data as OrkutCommunity);

      // Para demonstra√ß√£o
      const result: OrkutCommunity[] = [
        {
          id: 'comm_001',
          name: 'Eu amo tecnologia descentralizada',
          description: 'Comunidade para entusiastas de tecnologia descentralizada e PasteDB!',
          category: 'Tecnologia',
          owner_id: 'user_001',
          owner_name: 'Jo√£o Silva',
          members_count: 1247,
          photo_url: '',
          visibility: 'public',
          is_active: true,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }
      ];

      this.cache.set(cacheKey, result, 10 * 60 * 1000); // Cache por 10 minutos
      return result;
    } catch (error) {
      console.error('‚ùå Erro ao buscar comunidades:', error);
      return [];
    }
  }

  // =====================================================================================
  // OPERA√á√ïES COM AMIZADES
  // =====================================================================================

  async getFriends(userId: string): Promise<OrkutProfile[]> {
    const cacheKey = `friends_${userId}`;
    const cached = this.cache.get<OrkutProfile[]>(cacheKey);
    if (cached) return cached;

    try {
      // Buscar amizades aceitas
      // const friendshipKeys = await this.db.search(userId);
      // const friendships = await Promise.all(
      //   friendshipKeys.map(key => this.db.read(key))
      // );
      // const acceptedFriendships = friendships
      //   .filter(Boolean)
      //   .map(record => record.data as OrkutFriendship)
      //   .filter(f => f.status === 'accepted');

      // Para demonstra√ß√£o
      const friends: OrkutProfile[] = [];

      this.cache.set(cacheKey, friends, 5 * 60 * 1000); // Cache por 5 minutos
      return friends;
    } catch (error) {
      console.error(`‚ùå Erro ao buscar amigos de ${userId}:`, error);
      return [];
    }
  }

  // =====================================================================================
  // UTILIT√ÅRIOS
  // =====================================================================================

  private generateId(): string {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
  }

  async getStats(): Promise<{
    profiles: number;
    posts: number;
    communities: number;
    friendships: number;
    cacheSize: number;
  }> {
    try {
      // const totalKeys = await this.db.list_keys();
      // const stats = {
      //   profiles: totalKeys.filter(key => key.startsWith('profile_')).length,
      //   posts: totalKeys.filter(key => key.startsWith('post_')).length,
      //   communities: totalKeys.filter(key => key.startsWith('community_')).length,
      //   friendships: totalKeys.filter(key => key.startsWith('friendship_')).length,
      //   cacheSize: this.cache.size
      // };

      // Para demonstra√ß√£o
      const stats = {
        profiles: 3,
        posts: 3,
        communities: 2,
        friendships: 2,
        cacheSize: 0 // this.cache.size n√£o existe, seria um map
      };

      return stats;
    } catch (error) {
      console.error('‚ùå Erro ao obter estat√≠sticas:', error);
      return { profiles: 0, posts: 0, communities: 0, friendships: 0, cacheSize: 0 };
    }
  }

  // Limpar cache
  clearCache(): void {
    this.cache.clear();
    console.log('üßπ Cache limpo');
  }
}

// Singleton para uso global na aplica√ß√£o
let orkutDBInstance: OrkutPasteDBAdapter | null = null;

export function getOrkutDB(): OrkutPasteDBAdapter {
  if (!orkutDBInstance) {
    orkutDBInstance = new OrkutPasteDBAdapter();
  }
  return orkutDBInstance;
}

// Hook para React/Next.js
export function useOrkutDB() {
  const db = getOrkutDB();
  
  return {
    // Perfis
    getProfile: db.getProfile.bind(db),
    updateProfile: db.updateProfile.bind(db),
    searchProfiles: db.searchProfiles.bind(db),
    
    // Posts
    createPost: db.createPost.bind(db),
    getPost: db.getPost.bind(db),
    getFeedPosts: db.getFeedPosts.bind(db),
    
    // Comunidades
    getCommunities: db.getCommunities.bind(db),
    
    // Amizades
    getFriends: db.getFriends.bind(db),
    
    // Utilit√°rios
    getStats: db.getStats.bind(db),
    clearCache: db.clearCache.bind(db)
  };
}

export default OrkutPasteDBAdapter;

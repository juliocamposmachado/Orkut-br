import { NextRequest, NextResponse } from 'next/server'
import { SupabaseToPasteDBMigrator, runMigration, checkMigrationStatus } from '@/lib/supabase-to-pastedb-migrator'

// üöÄ API ENDPOINT PARA MIGRA√á√ÉO SUPABASE ‚Üí PASTEDB
export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ Iniciando processo de migra√ß√£o Supabase ‚Üí PasteDB...')

    // Verificar status atual antes da migra√ß√£o
    const statusBefore = await checkMigrationStatus()
    console.log('üìä Status antes da migra√ß√£o:', statusBefore)

    // Executar migra√ß√£o completa
    const result = await runMigration({
      batchSize: 100,
      delayBetweenBatches: 500,
      enableBackup: true,
      skipExisting: false
    })

    // Verificar status ap√≥s migra√ß√£o
    const statusAfter = await checkMigrationStatus()
    console.log('üìä Status ap√≥s migra√ß√£o:', statusAfter)

    return NextResponse.json({
      success: result.success,
      message: result.success ? 
        `‚úÖ Migra√ß√£o conclu√≠da com sucesso! ${result.migratedRecords}/${result.totalRecords} registros migrados` :
        `‚ùå Migra√ß√£o parcialmente conclu√≠da com erros`,
      result,
      statusBefore,
      statusAfter,
      summary: {
        totalTime: `${(result.duration / 1000).toFixed(2)}s`,
        successRate: `${((result.migratedRecords / result.totalRecords) * 100).toFixed(1)}%`,
        recordsMigrated: result.migratedRecords,
        recordsFailed: result.failedRecords
      }
    }, { 
      status: result.success ? 200 : 206 // 206 = Partial Content (sucesso parcial)
    })

  } catch (error) {
    console.error('‚ùå Erro na migra√ß√£o:', error)
    
    return NextResponse.json({
      success: false,
      message: 'Erro interno durante a migra√ß√£o',
      error: error instanceof Error ? error.message : String(error)
    }, { status: 500 })
  }
}

// GET - Verificar status da migra√ß√£o
export async function GET() {
  try {
    console.log('üìä Verificando status da migra√ß√£o...')

    const status = await checkMigrationStatus()
    
    const needsMigration = Object.values(status.missingRecords).some(count => count > 0)
    const totalSupabase = Object.values(status.supabaseRecords).reduce((a, b) => a + b, 0)
    const totalPasteDB = Object.values(status.pastedbRecords).reduce((a, b) => a + b, 0)
    const totalMissing = Object.values(status.missingRecords).reduce((a, b) => a + b, 0)

    return NextResponse.json({
      status: 'success',
      needsMigration,
      summary: {
        totalSupabaseRecords: totalSupabase,
        totalPasteDBRecords: totalPasteDB,
        totalMissingRecords: totalMissing,
        migrationProgress: totalSupabase > 0 ? `${((totalPasteDB / totalSupabase) * 100).toFixed(1)}%` : '0%'
      },
      details: status,
      recommendations: needsMigration ? [
        'Execute POST /api/migration/run para migrar dados em falta',
        'Ou execute POST /api/migration/incremental para migra√ß√£o incremental'
      ] : [
        'Todos os dados est√£o sincronizados! üéâ',
        'Execute migra√ß√µes incrementais periodicamente para manter atualizado'
      ]
    })

  } catch (error) {
    console.error('‚ùå Erro ao verificar status:', error)
    
    return NextResponse.json({
      status: 'error',
      message: 'Erro ao verificar status da migra√ß√£o',
      error: error instanceof Error ? error.message : String(error)
    }, { status: 500 })
  }
}

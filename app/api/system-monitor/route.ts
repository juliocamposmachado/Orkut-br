import { NextRequest, NextResponse } from 'next/server'

// Configura√ß√£o da API do Gemini
const GEMINI_API_KEY = process.env.GEMINI_API_KEY
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent'

interface SystemReport {
  timestamp: string
  overall_health: 'excellent' | 'good' | 'warning' | 'critical'
  deploy_analysis: any
  bug_detection: any
  notifications_created: number
  ai_summary: string
  recommendations: string[]
  next_check_in: string
}

// Fun√ß√£o principal de verifica√ß√£o do sistema
async function runSystemCheck(): Promise<SystemReport> {
  console.log('üöÄ Iniciando verifica√ß√£o completa do sistema Orkut...')
  
  try {
    // 1. Verificar bugs e performance
    console.log('üîç Verificando bugs e performance...')
    const bugMonitorResponse = await fetch('http://localhost:3000/api/bug-monitor', {
      method: 'GET'
    })
    const bugData = await bugMonitorResponse.json()

    // 2. Verificar deploy
    console.log('üì¶ Analisando deploy...')
    const deployResponse = await fetch('http://localhost:3000/api/deploy-checker', {
      method: 'GET'
    })
    const deployData = await deployResponse.json()

    // 3. Criar notifica√ß√µes se necess√°rio
    let notificationsCreated = 0
    
    // Se encontrou bugs cr√≠ticos ou de alta severidade, criar notifica√ß√µes
    const criticalBugs = bugData.bugs?.filter((bug: any) => 
      bug.severity === 'critical' || bug.severity === 'high'
    ) || []

    if (criticalBugs.length > 0) {
      console.log(`‚ö†Ô∏è Encontrados ${criticalBugs.length} bugs cr√≠ticos, criando notifica√ß√µes...`)
      
      for (const bug of criticalBugs) {
        try {
          const notificationResponse = await fetch('http://localhost:3000/api/bug-notifications', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              bug_report: bug,
              auto_post_to_feed: true,
              notify_users: true
            })
          })
          
          if (notificationResponse.ok) {
            notificationsCreated++
          }
        } catch (error) {
          console.error('Erro ao criar notifica√ß√£o:', error)
        }
      }
    }

    // 4. Determinar sa√∫de geral do sistema
    let overallHealth: SystemReport['overall_health'] = 'excellent'
    
    const totalBugs = bugData.bugs?.length || 0
    const criticalBugsCount = bugData.bugs?.filter((b: any) => b.severity === 'critical').length || 0
    const highBugsCount = bugData.bugs?.filter((b: any) => b.severity === 'high').length || 0
    const performanceScore = bugData.performance_score || 100

    if (criticalBugsCount > 0 || performanceScore < 30) {
      overallHealth = 'critical'
    } else if (highBugsCount > 0 || performanceScore < 60 || deployData.status === 'failed') {
      overallHealth = 'warning'
    } else if (totalBugs > 2 || performanceScore < 80) {
      overallHealth = 'good'
    }

    // 5. Gerar resumo com IA
    console.log('ü§ñ Gerando resumo com IA...')
    const aiSummary = await generateSystemSummary({
      totalBugs,
      criticalBugsCount,
      highBugsCount,
      performanceScore,
      deployStatus: deployData.status,
      overallHealth,
      uptime: bugData.uptime
    })

    // 6. Gerar recomenda√ß√µes
    const recommendations = generateRecommendations({
      overallHealth,
      performanceScore,
      totalBugs,
      criticalBugsCount,
      deployData,
      bugData
    })

    // 7. Calcular pr√≥xima verifica√ß√£o (baseado na sa√∫de do sistema)
    const checkIntervals = {
      'critical': 5,     // 5 minutos
      'warning': 15,     // 15 minutos  
      'good': 30,        // 30 minutos
      'excellent': 60    // 60 minutos
    }
    
    const nextCheckMinutes = checkIntervals[overallHealth]
    const nextCheckTime = new Date(Date.now() + nextCheckMinutes * 60000)

    const systemReport: SystemReport = {
      timestamp: new Date().toISOString(),
      overall_health: overallHealth,
      deploy_analysis: deployData,
      bug_detection: bugData,
      notifications_created: notificationsCreated,
      ai_summary: aiSummary,
      recommendations,
      next_check_in: `${nextCheckMinutes} minutos (${nextCheckTime.toLocaleTimeString('pt-BR')})`
    }

    console.log(`‚úÖ Verifica√ß√£o conclu√≠da - Sa√∫de: ${overallHealth}, Bugs: ${totalBugs}, Notifica√ß√µes: ${notificationsCreated}`)
    
    return systemReport

  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o do sistema:', error)
    
    return {
      timestamp: new Date().toISOString(),
      overall_health: 'critical',
      deploy_analysis: { error: 'Falha na verifica√ß√£o de deploy' },
      bug_detection: { error: 'Falha na detec√ß√£o de bugs' },
      notifications_created: 0,
      ai_summary: 'Sistema de monitoramento temporariamente indispon√≠vel. Verifica√ß√£o manual necess√°ria.',
      recommendations: [
        'üîß Reiniciar sistema de monitoramento',
        'üõ†Ô∏è Verificar conectividade das APIs',
        'üìû Contatar equipe t√©cnica'
      ],
      next_check_in: '5 minutos (modo de recupera√ß√£o)'
    }
  }
}

// Fun√ß√£o para gerar resumo com IA
async function generateSystemSummary(data: any): Promise<string> {
  try {
    const prompt = `
    Voc√™ √© o Sistema de Monitoramento Orkut. Analise os dados e forne√ßa um resumo executivo conciso:

    Dados do Sistema:
    - Total de bugs: ${data.totalBugs}
    - Bugs cr√≠ticos: ${data.criticalBugsCount}
    - Bugs de alta prioridade: ${data.highBugsCount}
    - Score de performance: ${data.performanceScore}/100
    - Status do deploy: ${data.deployStatus}
    - Sa√∫de geral: ${data.overallHealth}
    - Uptime: ${data.uptime}

    Forne√ßa um resumo em portugu√™s que seja:
    1. Profissional mas acess√≠vel
    2. M√°ximo 150 palavras
    3. Destaque pontos cr√≠ticos
    4. Tranquilizador quando apropriado
    5. Use emojis sutis

    Formato: Status atual + principais observa√ß√µes + pr√≥ximas a√ß√µes (se necess√°rio)
    `

    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        contents: [{ parts: [{ text: prompt }] }],
        generationConfig: {
          temperature: 0.4,
          topK: 1,
          topP: 1,
          maxOutputTokens: 400,
        }
      }),
    })

    if (response.ok) {
      const aiData = await response.json()
      return aiData.candidates?.[0]?.content?.parts?.[0]?.text?.trim() || getDefaultSummary(data.overallHealth)
    }
    
    return getDefaultSummary(data.overallHealth)
    
  } catch (error) {
    console.error('Erro ao gerar resumo com IA:', error)
    return getDefaultSummary(data.overallHealth)
  }
}

// Resumos padr√£o baseados na sa√∫de do sistema
function getDefaultSummary(health: string): string {
  const summaries = {
    'excellent': '‚ú® Sistema Orkut funcionando perfeitamente! Todos os servi√ßos operacionais, performance excelente e nenhum problema detectado. Monitoramento ativo mantendo a qualidade.',
    'good': '‚úÖ Sistema est√°vel e operacional. Pequenos pontos de aten√ß√£o identificados, mas sem impacto para os usu√°rios. Equipe acompanhando evolu√ß√£o.',
    'warning': '‚ö†Ô∏è Sistema operacional com algumas degrada√ß√µes detectadas. Equipe t√©cnica investigando e aplicando corre√ß√µes. Experi√™ncia do usu√°rio pode ser afetada minimamente.',
    'critical': 'üö® Problemas cr√≠ticos identificados no sistema. Equipe t√©cnica mobilizada para corre√ß√£o urgente. Atualiza√ß√µes frequentes at√© resolu√ß√£o completa.'
  }
  
  return summaries[health as keyof typeof summaries] || summaries.good
}

// Gerar recomenda√ß√µes baseadas no estado do sistema
function generateRecommendations(data: any): string[] {
  const recommendations = []

  if (data.overallHealth === 'critical') {
    recommendations.push('üö® A√á√ÉO URGENTE: Resolver bugs cr√≠ticos imediatamente')
    recommendations.push('üìû Notificar equipe de plant√£o')
    recommendations.push('‚è±Ô∏è Aumentar frequ√™ncia de monitoramento para 5 minutos')
  }

  if (data.performanceScore < 70) {
    recommendations.push('‚ö° Otimizar performance - score abaixo do esperado')
    recommendations.push('üîç Investigar gargalos de carregamento')
  }

  if (data.totalBugs > 3) {
    recommendations.push('üêõ Priorizar corre√ß√£o de bugs acumulados')
    recommendations.push('üîÑ Revisar processo de deploy')
  }

  if (data.deployData?.status === 'failed') {
    recommendations.push('üì¶ Verificar falhas no √∫ltimo deploy')
    recommendations.push('üîß Executar rollback se necess√°rio')
  }

  // Recomenda√ß√µes gerais baseadas na sa√∫de
  if (data.overallHealth === 'excellent') {
    recommendations.push('üìà Manter padr√µes de qualidade atuais')
    recommendations.push('üîÑ Continuar monitoramento preventivo')
  } else if (data.overallHealth === 'good') {
    recommendations.push('‚ú® Otimizar pontos de melhoria identificados')
    recommendations.push('üìä Monitorar tend√™ncias de performance')
  }

  // Sempre incluir
  recommendations.push('ü§ñ Sistema de IA monitorando continuamente')
  recommendations.push(`‚è∞ Pr√≥xima verifica√ß√£o autom√°tica programada`)

  return recommendations.slice(0, 6) // Limitar a 6 recomenda√ß√µes
}

// Endpoint principal - GET para verifica√ß√£o autom√°tica
export async function GET(request: NextRequest) {
  try {
    const systemReport = await runSystemCheck()
    
    return NextResponse.json({
      success: true,
      report: systemReport,
      meta: {
        system_version: '1.0.0',
        api_version: 'v1',
        gemini_integration: 'active',
        monitoring_enabled: true
      }
    })

  } catch (error) {
    console.error('Erro no monitoramento do sistema:', error)
    
    return NextResponse.json({
      success: false,
      error: 'Falha na verifica√ß√£o do sistema',
      report: {
        timestamp: new Date().toISOString(),
        overall_health: 'critical',
        ai_summary: 'Sistema de monitoramento temporariamente indispon√≠vel.',
        recommendations: ['üîß Reiniciar servi√ßos de monitoramento']
      }
    }, { status: 500 })
  }
}

// Endpoint para verifica√ß√£o manual com par√¢metros customizados
export async function POST(request: NextRequest) {
  try {
    const { 
      force_deep_scan = false,
      create_test_notification = false,
      target_url = null
    } = await request.json()

    console.log('üîß Executando verifica√ß√£o manual do sistema...')

    // Se solicitado, criar notifica√ß√£o de teste
    if (create_test_notification) {
      console.log('üìù Criando notifica√ß√£o de teste...')
      
      const testBug = {
        severity: 'low',
        category: 'functionality',
        description: 'Verifica√ß√£o manual do sistema executada com sucesso',
        recommendation: 'Sistema de monitoramento funcionando corretamente',
        timestamp: new Date().toISOString()
      }

      try {
        await fetch('http://localhost:3000/api/bug-notifications', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            bug_report: testBug,
            auto_post_to_feed: true,
            custom_message: 'ü§ñ Sistema Orkut: Verifica√ß√£o manual executada. Tudo funcionando perfeitamente! ‚ú®'
          })
        })
      } catch (error) {
        console.error('Erro ao criar notifica√ß√£o de teste:', error)
      }
    }

    // Executar verifica√ß√£o do sistema
    const systemReport = await runSystemCheck()

    return NextResponse.json({
      success: true,
      manual_check: true,
      report: systemReport,
      test_notification_created: create_test_notification,
      meta: {
        requested_at: new Date().toISOString(),
        force_deep_scan,
        target_url: target_url || 'https://orkut-br.vercel.app'
      }
    })

  } catch (error) {
    console.error('Erro na verifica√ß√£o manual:', error)
    return NextResponse.json({ 
      success: false, 
      error: 'Falha na verifica√ß√£o manual' 
    }, { status: 500 })
  }
}

// Configurar CORS
export async function OPTIONS(request: NextRequest) {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type',
    },
  })
}

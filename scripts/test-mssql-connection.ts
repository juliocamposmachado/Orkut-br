#!/usr/bin/env ts-node

/**
 * üîß SCRIPT DE TESTE - MS SQL SERVER CONNECTION
 * =============================================
 * 
 * Script para testar a conex√£o com o banco MS SQL Server 2022 Express
 * e verificar se as configura√ß√µes est√£o corretas.
 */

import { testConnection, executeQuery, closeConnection, TABLE_DEFINITIONS } from '../lib/mssql';
import { getOrkutMSSQL } from '../lib/orkut-mssql-adapter';

async function main() {
  console.log('üöÄ TESTE DE CONEX√ÉO MS SQL SERVER');
  console.log('================================\n');

  try {
    // Teste b√°sico de conex√£o
    console.log('üìã 1. Testando conex√£o b√°sica...');
    const isConnected = await testConnection();
    
    if (!isConnected) {
      throw new Error('Falha na conex√£o b√°sica');
    }
    
    console.log('‚úÖ Conex√£o b√°sica bem-sucedida!\n');

    // Teste de informa√ß√µes do servidor
    console.log('üìã 2. Obtendo informa√ß√µes do servidor...');
    const serverInfo = await executeQuery(`
      SELECT 
        @@VERSION as server_version,
        DB_NAME() as database_name,
        @@SERVERNAME as server_name,
        SUSER_SNAME() as user_name,
        GETDATE() as server_date
    `);

    if (serverInfo.recordset.length > 0) {
      const info = serverInfo.recordset[0];
      console.log(`‚úÖ Servidor: ${info.server_name}`);
      console.log(`‚úÖ Banco de dados: ${info.database_name}`);
      console.log(`‚úÖ Usu√°rio atual: ${info.user_name}`);
      console.log(`‚úÖ Data/hora: ${info.server_date}`);
      console.log(`‚úÖ Vers√£o: ${info.server_version.substring(0, 100)}...\n`);
    }

    // Verificar se as tabelas existem
    console.log('üìã 3. Verificando estrutura do banco...');
    const tablesResult = await executeQuery(`
      SELECT TABLE_NAME 
      FROM INFORMATION_SCHEMA.TABLES 
      WHERE TABLE_TYPE = 'BASE TABLE'
      ORDER BY TABLE_NAME
    `);

    console.log(`üìä Tabelas encontradas: ${tablesResult.recordset.length}`);
    tablesResult.recordset.forEach((table: any) => {
      console.log(`   - ${table.TABLE_NAME}`);
    });
    console.log();

    // Teste do adaptador
    console.log('üìã 4. Testando adaptador Orkut...');
    const orkutAdapter = getOrkutMSSQL();
    await orkutAdapter.initialize();
    
    const stats = await orkutAdapter.getStats();
    console.log('üìä Estat√≠sticas do banco:');
    console.log(`   - Perfis: ${stats.profiles}`);
    console.log(`   - Posts: ${stats.posts}`);
    console.log(`   - Comunidades: ${stats.communities}`);
    console.log(`   - Amizades: ${stats.friendships}\n`);

    console.log('‚úÖ TODOS OS TESTES PASSARAM COM SUCESSO!');
    console.log('üéâ Banco MS SQL Server est√° configurado corretamente!\n');

    // Mostrar pr√≥ximos passos
    console.log('üìã PR√ìXIMOS PASSOS:');
    console.log('1. Configurar senha no arquivo .env');
    console.log('2. Criar estrutura de tabelas se necess√°rio');
    console.log('3. Migrar dados existentes');
    console.log('4. Ativar flag NEXT_PUBLIC_USE_MSSQL_FOR_DATA=true\n');

  } catch (error) {
    console.error('‚ùå ERRO NO TESTE DE CONEX√ÉO:');
    console.error(error);
    console.log('\nüîß SOLU√á√ïES POSS√çVEIS:');
    console.log('1. Verifique se a senha do MS SQL Server est√° correta');
    console.log('2. Confirme se o servidor est√° acess√≠vel: OrkutBr.mssql.somee.com');
    console.log('3. Verifique se as vari√°veis de ambiente est√£o configuradas');
    console.log('4. Confirme se o usu√°rio juliomachado_SQLLogin_1 tem as permiss√µes necess√°rias');
    process.exit(1);
  } finally {
    // Fechar conex√£o
    await closeConnection();
  }
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  main();
}

// üîç TESTE DE CONEX√ÉO SUPABASE
// Execute: node test-supabase-connection.js

require('dotenv').config({ path: '.env.local' })

console.log('üîç DIAGN√ìSTICO DA CONEX√ÉO SUPABASE')
console.log('=====================================')

// Verificar vari√°veis de ambiente
console.log('üìä VARI√ÅVEIS DE AMBIENTE:')
console.log('NEXT_PUBLIC_SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL)
console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? 'DEFINIDA ‚úÖ' : 'N√ÉO DEFINIDA ‚ùå')
console.log('SUPABASE_SERVICE_ROLE_KEY:', process.env.SUPABASE_SERVICE_ROLE_KEY ? 'DEFINIDA ‚úÖ' : 'N√ÉO DEFINIDA ‚ùå')
console.log('')

// Testar conex√£o
async function testConnection() {
  try {
    const { createClient } = require('@supabase/supabase-js')
    
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    )

    console.log('üîÑ TESTANDO CONEX√ÉO COM SUPABASE...')
    
    // Teste direto: Verificar se a tabela 'todos' existe
    console.log('üîç VERIFICANDO TABELA "todos"...')
    
    const { data: todos, error: todosError } = await supabase
      .from('todos')
      .select('*')
      .limit(1)
    
    if (todosError) {
      if (todosError.code === 'PGRST106' || todosError.message.includes('does not exist')) {
        console.log('‚ùå TABELA "todos" N√ÉO EXISTE')
        console.log('üí° SOLU√á√ÉO: Execute o script SQL database/complete-schema.sql no Supabase Dashboard')
        console.log('üåê URL: https://supabase.com/dashboard/project/wjglxlnbizbqwpkvihsy/sql')
      } else {
        console.log('‚ùå ERRO AO ACESSAR TABELA "todos":', todosError.message)
      }
      return
    }
    
    console.log('‚úÖ TABELA "todos" EXISTE E ACESS√çVEL')
    console.log('üìä Dados na tabela:', todos)
    
    // Teste 3: Tentar inserir um registro de teste
    console.log('üîÑ TESTANDO INSER√á√ÉO...')
    
    const { data: insertTest, error: insertError } = await supabase
      .from('todos')
      .insert({ 
        title: 'Teste de Conex√£o', 
        content: 'Teste autom√°tico do script de diagn√≥stico',
        user_id: null 
      })
      .select()
    
    if (insertError) {
      console.log('‚ö†Ô∏è  ERRO NA INSER√á√ÉO:', insertError.message)
      if (insertError.message.includes('RLS')) {
        console.log('üí° POSS√çVEL CAUSA: Pol√≠tica RLS (Row Level Security)')
        console.log('üí° SOLU√á√ÉO: Configure as pol√≠ticas RLS ou use service_role_key para bypass')
      }
    } else {
      console.log('‚úÖ INSER√á√ÉO: SUCESSO')
      console.log('üìù Registro inserido:', insertTest)
    }

  } catch (error) {
    console.log('‚ùå ERRO GERAL:', error.message)
  }
}

testConnection()
